<?xml version="1.0" encoding="UTF-8"?>
<xf:action xmlns:h="http://www.w3.org/1999/xhtml" 
    xmlns:xf="http://www.w3.org/2002/xforms"
    xmlns:ev="http://www.w3.org/2001/xml-events"
    xmlns:xxf="http://orbeon.org/oxf/xml/xforms" 
    xmlns:dcm="http://www.kb.dk/dcm">
    
    <!-- 
    Code for inserting new XML elements at the right place according to a reference nodeset.
    The new element is inserted as a child of the current context node.

    The following variables must be in scope:
    nodeset:    The name of the nodeset to be added (as string())
    origin:     The nodeset to use as a model (as node())
    
    Use example:
    <xf:action if="not(m:persName)">
      <xf:var name="nodeset">m:persName</xf:var>
      <xf:var name="origin" select="instance('empty-instance')//m:respStmt[1]/m:persName[1]"/>
      <xi:include href="includes/create_and_place_element.xml"/>
    </xf:action>
    
    Axel Teich Geertinger
    Danish Centre for Music Editing
    The Royal Library, Copenhagen 2014
    -->
    
    <xf:action if="$origin">
        <xf:insert context="." origin="$origin" nodeset="xxf:evaluate($nodeset)"/>
    </xf:action>
    <xf:action if="not($origin)">
        <!-- if no model is pointed to, just create an empty element of the name indicated -->
        <xf:insert context="." origin="xf:element($nodeset)"/>
    </xf:action>
    
    
    <!-- now, move the new element into place according to the empty model if necessary-->
    <xf:var name="local-name" select="local-name($origin)"/>
    
    <xf:action if="*[local-name(.)=$local-name]/following-sibling::*[local-name()!=$local-name]">
        <!-- there are _differently_ named siblings after this one -->
        <xf:var name="following-name" select="local-name(*[local-name(.)=$local-name][1]/following-sibling::*[local-name()!=$local-name][1])"/>
        <xf:var name="parent_nodeset" select="."/>
        <!-- keep moving down until the order fits the model or reaching the end -->
        <xf:action while="$origin/preceding-sibling::*[local-name()=local-name($parent_nodeset/*[local-name(.)=$local-name]/following-sibling::*[local-name()!=$local-name][1])] 
            and count($parent_nodeset/*[local-name(.)=$local-name][1]/preceding-sibling::*)+1 &lt; count($parent_nodeset/*)">
            <xf:var name="pos" select="count(*[local-name(.)=$local-name][1]/preceding-sibling::*)+1"/>
            <xf:insert origin="../*[$pos]"
                nodeset="*" at="$pos+1"/>
            <xf:delete nodeset="*" at="$pos"/>
        </xf:action>
    </xf:action>
    
    <!-- The hard one: elements of the same name exist already, i.e. this is maybe just one with a new predicate 
        (usually @type or a child element). Moving further down may be necessary -->
    <xf:action if="count(*[local-name()=$local-name])&gt;1">
        <xf:var name="parent_nodeset" select="."/>
        <xf:var name="att_name" select="normalize-space(substring-before(substring-after($nodeset,'[@'),'='))"/>
        <xf:var name="element_name" select="normalize-space(substring-before(substring-after($nodeset,'[m:'),'='))"/>                                
        <xf:action if="$att_name">
            <!-- predicate is an attribute -->
            <xf:var name="att_value" select="xxf:evaluate($nodeset)/@*[name()=$att_name]"/>
            <!-- keep moving down until the order fits the model or reaching the end -->
            <xf:action while="($origin/preceding-sibling::*[local-name()=$local-name]/@*[name()=$att_name and .!=$att_value][.=$parent_nodeset/*[local-name(.)=$local-name][@*[name()=$att_name and .=$att_value]]/following-sibling::*[local-name()=$local-name]/@*[name()=$att_name]]
                or $origin/preceding-sibling::*[local-name()=$local-name][not(@*[name()=$att_name])][$parent_nodeset/*[local-name(.)=$local-name][@*[name()=$att_name and .=$att_value]]/following-sibling::*[local-name()=$local-name][not(@*[name()=$att_name])]])
                and count($parent_nodeset/*[local-name(.)=$local-name][1]/preceding-sibling::*)+1 &lt; count($parent_nodeset/*)">
                <!-- 
                    do as long as in the template there is any predicated element _before_ the new one, which comes _after_ the new one in the data
                    OR in the template there is any element without any predicate (=untyped) before the new one, while there is an untyped one coming _after_ in the data
                    AND as long as we haven't reached the end
                -->
                <xf:var name="pos" select="count(*[local-name(.)=$local-name][@*[name()=$att_name and .=$att_value]][1]/preceding-sibling::*)+1"/>
                <!-- move new element down one position -->
                <xf:insert origin="../*[$pos]"
                    nodeset="*" at="$pos+1"/>
                <xf:delete nodeset="*" at="$pos"/>
            </xf:action>
        </xf:action>
        <xf:action if="$element_name">
            <!-- predicate is an element; otherwise same procedure as above -->
            <xf:var name="element_value" select="xxf:evaluate($nodeset)/*[name()=$element_name]"/>
            <xf:action while="($origin/preceding-sibling::*[local-name()=$local-name]/*[name()=$element_name and .!=$element_value][.=$parent_nodeset/*[local-name(.)=$local-name][*[name()=$element_name and .=$element_value]]/following-sibling::*[local-name()=$local-name]/*[name()=$element_name]]
                or $origin/preceding-sibling::*[local-name()=$local-name][not(*[name()=$element_name])]
                [$parent_nodeset/*[local-name(.)=$local-name][*[name()=$element_name and .=$element_value]]/following-sibling::*[local-name()=$local-name][not(*[name()=$element_name])]])
                and count($parent_nodeset/*[local-name(.)=$local-name][1]/preceding-sibling::*)+1 &lt; count($parent_nodeset/*)">
                <xf:var name="pos" select="count(*[local-name(.)=$local-name][*[name()=$element_name and .=$element_value]][1]/preceding-sibling::*)+1"/>
                <xf:insert origin="../*[$pos]"
                    nodeset="*" at="$pos+1"/>
                <xf:delete nodeset="*" at="$pos"/>
            </xf:action>
        </xf:action>
    </xf:action>
    <!-- end moving -->

    <!-- Add xml:id -->    
    <!--<xf:insert xxf:iterate="descendant-or-self::*[not(@xml:id)]" 
        context="."
        origin="xxf:attribute('xml:id',concat(name(.),'_',substring(digest(string(random(true)), 'MD5', 'hex'),1,8)))"/>-->
    <xf:insert xxf:iterate="..//*[not(@xml:id)]"
        context="."
        origin="xxf:attribute('xml:id',concat(name(.),'_',substring(digest(string(random(true)), 'MD5', 'hex'),1,8)))"/>
    <xf:setvalue ref="xxf:instance('temp')/changed" value="'true'"/>
    <xf:dispatch name="id-update" target="form-group"/>
    <!-- Check for duplicate IDs -->
    <xf:action while="xxf:instance('data-instance')//*[@xml:id = preceding-sibling::*/@xml:id]">
        <xf:setvalue
            ref="xxf:instance('data-instance')//*[@xml:id = preceding-sibling::*/@xml:id]/@xml:id"
            value="concat(name(.),'_',substring(digest(string(random(true)), 'MD5', 'hex'),1,8))"/>
    </xf:action>
    <xf:setvalue ref="xxf:instance('temp')/changed" value="'true'"/>
    
</xf:action>